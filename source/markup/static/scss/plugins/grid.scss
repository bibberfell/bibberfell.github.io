// Grid mixins
@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

@mixin responsive-visibility($parent) {
  #{$parent} {
    display: block !important;
  }
  table#{$parent}  { display: table !important; }
  tr#{$parent}     { display: table-row !important; }
  th#{$parent},
  td#{$parent}     { display: table-cell !important; }
}

@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}

// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left:  floor(($gutter / 2));
    padding-right: ceil(($gutter / 2));
    @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
    margin-left:  ceil(($gutter / -2));
    margin-right: floor(($gutter / -2));
    @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    float: left;
    width: percentage(($columns / $grid-columns));
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
    margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
    left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
    right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);

    @media (min-width: $screen-sm-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}
@mixin make-sm-column-offset($columns) {
    @media (min-width: $screen-sm-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}
@mixin make-sm-column-push($columns) {
    @media (min-width: $screen-sm-min) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-sm-column-pull($columns) {
    @media (min-width: $screen-sm-min) {
        right: percentage(($columns / $grid-columns));
    }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);

    @media (min-width: $screen-md-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}
@mixin make-md-column-offset($columns) {
    @media (min-width: $screen-md-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}
@mixin make-md-column-push($columns) {
    @media (min-width: $screen-md-min) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-md-column-pull($columns) {
    @media (min-width: $screen-md-min) {
        right: percentage(($columns / $grid-columns));
    }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);

    @media (min-width: $screen-lg-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}
@mixin make-lg-column-offset($columns) {
    @media (min-width: $screen-lg-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}
@mixin make-lg-column-push($columns) {
    @media (min-width: $screen-lg-min) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-lg-column-pull($columns) {
    @media (min-width: $screen-lg-min) {
        right: percentage(($columns / $grid-columns));
    }
}

// Generate the xtra large columns
@mixin make-xl-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);

    @media (min-width: $screen-xl-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}
@mixin make-xl-column-offset($columns) {
    @media (min-width: $screen-xl-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}
@mixin make-xl-column-push($columns) {
    @media (min-width: $screen-xl-min) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-xl-column-pull($columns) {
    @media (min-width: $screen-xl-min) {
        right: percentage(($columns / $grid-columns));
    }
}

// Generate the xxtra large columns
@mixin make-xxl-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);

    @media (min-width: $screen-xxl-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}
@mixin make-xxl-column-offset($columns) {
    @media (min-width: $screen-xxl-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}
@mixin make-xxl-column-push($columns) {
    @media (min-width: $screen-xxl-min) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-xxl-column-pull($columns) {
    @media (min-width: $screen-xxl-min) {
        right: percentage(($columns / $grid-columns));
    }
}

//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@mixin container {
    @include container-fixed;

    @media (min-width: $screen-sm-min) {
        width: $container-sm;
    }
    @media (min-width: $screen-md-min) {
        width: $container-md;
    }
    @media (min-width: $screen-lg-min) {
        width: $container-lg;
    }
    @media (min-width: $screen-xl-min) {
        width: $container-xl;
    }
    @media (min-width: $screen-xxl-min) {
        width: $container-xxl;
    }
}


//
// Responsive: Utility classes
// --------------------------------------------------


// IE10 in Windows (Phone) 8
//
// Support for responsive views via media queries is kind of borked in IE10, for
// Surface/desktop in split view and for Windows Phone 8. This particular fix
// must be accompanied by a snippet of JavaScript to sniff the user agent and
// apply some conditional CSS to *only* the Surface/desktop Windows 8. Look at
// our Getting Started page for more information on this bug.
//
// For more information, see the following:
//
// Issue: https://github.com/twbs/bootstrap/issues/10497
// Docs: http://getbootstrap.com/getting-started/#support-ie10-width
// Source: http://timkadlec.com/2013/01/windows-phone-8-and-device-width/
// Source: http://timkadlec.com/2012/10/ie10-snap-mode-and-responsive-design/

@at-root {
    @-ms-viewport {
        width: device-width;
    }
}


// Visibility utilities
// Note: Deprecated .visible-xs, .visible-sm, .visible-md, and .visible-lg as of v3.2.0

@include responsive-invisibility('.visible-xs');
@include responsive-invisibility('.visible-sm');
@include responsive-invisibility('.visible-md');
@include responsive-invisibility('.visible-lg');

.visible-xs-block,
.visible-xs-inline,
.visible-xs-inline-block,
.visible-sm-block,
.visible-sm-inline,
.visible-sm-inline-block,
.visible-md-block,
.visible-md-inline,
.visible-md-inline-block,
.visible-lg-block,
.visible-lg-inline,
.visible-lg-inline-block {
    display: none !important;
}

@media (max-width: $screen-xs-max) {
    @include responsive-visibility('.visible-xs');
}
.visible-xs-block {
    @media (max-width: $screen-xs-max) {
        display: block !important;
    }
}
.visible-xs-inline {
    @media (max-width: $screen-xs-max) {
        display: inline !important;
    }
}
.visible-xs-inline-block {
    @media (max-width: $screen-xs-max) {
        display: inline-block !important;
    }
}

@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    @include responsive-visibility('.visible-sm');
}
.visible-sm-block {
    @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
        display: block !important;
    }
}
.visible-sm-inline {
    @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
        display: inline !important;
    }
}
.visible-sm-inline-block {
    @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
        display: inline-block !important;
    }
}

@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    @include responsive-visibility('.visible-md');
}
.visible-md-block {
    @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
        display: block !important;
    }
}
.visible-md-inline {
    @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
        display: inline !important;
    }
}
.visible-md-inline-block {
    @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
        display: inline-block !important;
    }
}

@media (min-width: $screen-lg-min) and (max-width: $screen-lg-max) {
    @include responsive-visibility('.visible-lg');
}
.visible-lg-block {
    @media (min-width: $screen-lg-min) and (max-width: $screen-lg-max) {
        display: block !important;
    }
}
.visible-lg-inline {
    @media (min-width: $screen-lg-min) and (max-width: $screen-lg-max) {
        display: inline !important;
    }
}
.visible-lg-inline-block {
    @media (min-width: $screen-lg-min) and (max-width: $screen-lg-max) {
        display: inline-block !important;
    }
}

@media (min-width: $screen-xl-min) and (max-width: $screen-xl-max) {
    @include responsive-visibility('.visible-xxl');
}
.visible-xxl-block {
    @media (min-width: $screen-xl-min) and (max-width: $screen-xl-max) {
        display: block !important;
    }
}
.visible-xxl-inline {
    @media (min-width: $screen-xl-min) and (max-width: $screen-xl-max) {
        display: inline !important;
    }
}
.visible-xxl-inline-block {
    @media (min-width: $screen-xl-min) and (max-width: $screen-xl-max) {
        display: inline-block !important;
    }
}

@media (max-width: $screen-xs-max) {
    @include responsive-invisibility('.hidden-xs');
}

@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    @include responsive-invisibility('.hidden-sm');
}

@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    @include responsive-invisibility('.hidden-md');
}

@media (min-width: $screen-lg-min) and (max-width: $screen-lg-max) {
    @include responsive-invisibility('.hidden-lg');
}

@media (min-width: $screen-xl-min) and (max-width: $screen-xl-max) {
    @include responsive-invisibility('.hidden-xl');
}

@media (min-width: $screen-xxl-min) {
    @include responsive-invisibility('.hidden-xxl');
}


// Print utilities
//
// Media queries are placed on the inside to be mixin-friendly.


@include responsive-invisibility('.visible-print');

@media print {
    @include responsive-visibility('.visible-print');
}
.visible-print-block {
    display: none !important;

    @media print {
        display: block !important;
    }
}
.visible-print-inline {
    display: none !important;

    @media print {
        display: inline !important;
    }
}
.visible-print-inline-block {
    display: none !important;

    @media print {
        display: inline-block !important;
    }
}

@media print {
    @include responsive-invisibility('.hidden-print');
}